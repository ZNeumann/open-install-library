# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: mssql-server-integration-installer
displayName: Microsoft Sql Server Integration Installer
description: New Relic install recipe for the Microsoft SqlServer Integration
repository: https://github.com/newrelic/nri-mssql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: windows

keywords:
  - Integration
  - SqlServer
  - Windows

processMatch:
  - sqlservr.exe

validationNrql: "SELECT count(*) from MssqlInstanceSample where hostname like '{{.HOSTNAME}}' FACET entityGuid SINCE 10 minutes ago"

preInstall:
  info: |2
      To capture data from the Microsoft SQL Server integration, you'll first need to meet these prerequisites:
      - Microsoft SQL Server version requirement (see https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#about)
      - Microsoft SQL Server user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: input_install


    assert_infra:
      cmds:
        - |
          powershell -command '
          $output = Get-Service "newrelic-infra"
          if ( -not ($output -like "*newrelic-infra*") ) {
            Write-Host -ForegroundColor Red "The newrelic-infra agent service is not installed on the host, but is required to install this integration. Please install the newrelic infrastructure agent."
            Exit 1
          }
          '

    input_install:
      cmds:
        - |
          powershell -command '
          $TRIES=0
          $MAX_RETRIES=3

          # Check Env Vars
          $NEW_RELIC_ASSUME_YES= "{{.NEW_RELIC_ASSUME_YES}}"
          $NR_CLI_DB_HOSTNAME=   "{{.NR_CLI_DB_HOSTNAME}}"
          $NR_CLI_DB_PORT=       "{{.NR_CLI_DB_PORT}}"
          $NR_CLI_DB_USERNAME=   "{{.NR_CLI_DB_USERNAME}}"
          $NR_CLI_DB_PASSWORD=   "{{.NR_CLI_DB_PASSWORD}}"

          # Set Defaults
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_HOSTNAME)) {$NR_CLI_DB_HOSTNAME = "127.0.0.1"}
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_PORT)) {$NR_CLI_DB_PORT = "1433"}

          if ($NEW_RELIC_ASSUME_YES -ieq "false") {
            DO
            {
              $NR_CLI_DB_HOSTNAME = Read-Host -Prompt "SQL Server Hostname or IP (default: 127.0.0.1)"
              if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_HOSTNAME)) {$NR_CLI_DB_HOSTNAME = "127.0.0.1"}
              $NR_CLI_DB_PORT     = Read-Host -Prompt "SQL Server Port (default: 1433)"
              if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_PORT)) {$NR_CLI_DB_PORT = "1433"}


              $NR_CLI_DB_USERNAME = Read-Host -Prompt "MSSQL Username"
              $NR_CLI_DB_PASSWORD = Read-Host -Prompt "MSSQL Password" -AsSecureString
              $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NR_CLI_DB_PASSWORD)
              $NR_CLI_DB_PASSWORD = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($bstr)
              $TRIES++

              if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_USERNAME) -Or [string]::IsNullOrWhiteSpace($NR_CLI_DB_PASSWORD)) {
                Write-Host -ForegroundColor Red "Please provide a valid Username and Password. Fields cannot be blank."
                if ( $TRIES -ge $MAX_RETRIES ) { exit 4 } else {
                  Write-Host "Please try again"
                  continue
                }
              }

              $output = sqlcmd -S "$NR_CLI_DB_HOSTNAME,$NR_CLI_DB_PORT" -U $NR_CLI_DB_USERNAME -P "$NR_CLI_DB_PASSWORD" -Q "SELECT GETDATE()" 2>&1
              if ($output -like "*Connection string is not valid*") {
                Write-Host -ForegroundColor Red "Cannot connect to the SQL Server instance $NR_CLI_DB_HOSTNAME. Please check the if the port is a valid number."
                if ( $TRIES -ge $MAX_RETRIES ) { exit 8 } else {
                  Write-Host "Please try again"
                  continue
                }
              }
              if ($output -like "*No such host is known*") {
                Write-Host -ForegroundColor Red "Cannot connect to the SQL Server instance $NR_CLI_DB_HOSTNAME. Please check the provided hostname."
                if ( $TRIES -ge $MAX_RETRIES ) { exit 6 } else {
                  Write-Host "Please try again"
                  continue
                }
              }
              if ($output -like "*The wait operation timed out*") {
                Write-Host -ForegroundColor Red "Cannot connect to the SQL Server instance $NR_CLI_DB_HOSTNAME. Server is not responding. Please review your hostname and/or port."
                if ( $TRIES -ge $MAX_RETRIES ) { exit 7 } else {
                  Write-Host "Please try again"
                  continue
                }
              }
              if ($output -like "*Login failed for user*") {
                Write-Host -ForegroundColor Red "Cannot connect to the SQL Server instance $NR_CLI_DB_HOSTNAME with the provided username $NR_CLI_DB_USERNAME and password."
                if ( $TRIES -ge $MAX_RETRIES ) { exit 3 } else {
                  Write-Host "Please try again"
                  continue
                }
              }
              Write-Host "Installing MSSql Integration..."
              break
            } While ($TRIES -le 3)

          }

          #Remove previous versions
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              $keyData = Get-Item -Path HKLM:\$key
              $name = $keyData.GetValue("DisplayName")
              if ($name -and $name -match $Match) {
                $keyId = Split-Path $key -Leaf
                $uninstallIds.Add($keyId) | Out-Null
              }
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "nri-mssql"
          foreach ($uninstallId in $uninstallIds) {
            $uninstallCommand = "msiexec /x """ + $uninstallId + """ /qn"
            Invoke-Expression $uninstallCommand
            # wait here to allow uninstall command to complete since it returns without waiting
            Start-Sleep -s 15
          }


          # Installing MSSql Integration
          (New-Object System.Net.WebClient).DownloadFile("http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi", "$env:TEMP\nri-mssql-amd64.msi");
          msiexec.exe /qn /i "$env:TEMP\nri-mssql-amd64.msi" | Out-Null;
          $OhiConfig = "C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml"; if (Test-Path $OhiConfig) { Remove-Item $OhiConfig };
          Add-Content -Path "C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml" -Value @"
          integrations:
            - name`:` nri-mssql
              env`:`
                HOSTNAME`:` $($NR_CLI_DB_HOSTNAME)
                USERNAME`:` $($NR_CLI_DB_USERNAME)
                PASSWORD`:` $($NR_CLI_DB_PASSWORD)
                PORT`:` $($NR_CLI_DB_PORT)
              inventory_source`:` config/mssql
              interval`:` 15
          "@ -Force | Out-Null;

          Restart-Service newrelic-infra
          '

postInstall:
  info: |2
      ⚙️  The Microsoft SQL Server configuration file can be found in C:\Program Files\New Relic\newrelic-infra\integrations.d\mssql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#config
